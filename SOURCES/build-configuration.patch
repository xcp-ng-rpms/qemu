Change the build configuration to decrease size and attack area

This is made up of:
* Removing support for various block device formats.
* Removing support for VFIO.
* Enable NVME for guest UEFI
* List of devices needed so ./configure option
  --without-default-devices can be used.


diff --git a/backends/Makefile.objs b/backends/Makefile.objs
index f0691116e8..f51224cc84 100644
--- a/backends/Makefile.objs
+++ b/backends/Makefile.objs
@@ -6,8 +6,8 @@ common-obj-$(CONFIG_TPM) += tpm.o
 common-obj-y += hostmem.o hostmem-ram.o
 common-obj-$(CONFIG_POSIX) += hostmem-file.o
 
-common-obj-y += cryptodev.o
-common-obj-y += cryptodev-builtin.o
+common-obj-$(call lnot,$(CONFIG_XEN)) += cryptodev.o
+common-obj-$(call lnot,$(CONFIG_XEN)) += cryptodev-builtin.o
 
 ifeq ($(CONFIG_VIRTIO_CRYPTO),y)
 common-obj-y += cryptodev-vhost.o
diff --git a/block/Makefile.objs b/block/Makefile.objs
index e394fe0b6c..27981e6e2f 100644
--- a/block/Makefile.objs
+++ b/block/Makefile.objs
@@ -1,4 +1,5 @@
-block-obj-y += raw-format.o vmdk.o vpc.o
+block-obj-y += raw-format.o
+block-obj-$(call lnot,$(CONFIG_XEN)) += vmdk.o vpc.o
 block-obj-$(CONFIG_QCOW1) += qcow.o
 block-obj-$(CONFIG_VDI) += vdi.o
 block-obj-$(CONFIG_CLOOP) += cloop.o
@@ -9,7 +10,7 @@ block-obj-$(CONFIG_DMG) += dmg.o
 block-obj-y += qcow2.o qcow2-refcount.o qcow2-cluster.o qcow2-snapshot.o qcow2-cache.o qcow2-bitmap.o qcow2-threads.o
 block-obj-$(CONFIG_QED) += qed.o qed-l2-cache.o qed-table.o qed-cluster.o
 block-obj-$(CONFIG_QED) += qed-check.o
-block-obj-y += vhdx.o vhdx-endian.o vhdx-log.o
+block-obj-$(call lnot,$(CONFIG_XEN)) += vhdx.o vhdx-endian.o vhdx-log.o
 block-obj-y += quorum.o
 block-obj-y += blkdebug.o blkverify.o blkreplay.o
 block-obj-$(CONFIG_PARALLELS) += parallels.o
diff --git a/crypto/Makefile.objs b/crypto/Makefile.objs
index cdb01f9de9..cb1d85c367 100644
--- a/crypto/Makefile.objs
+++ b/crypto/Makefile.objs
@@ -40,3 +40,7 @@ crypto-obj-y += block-luks.o
 crypto-user-obj-y = aes.o $(crypto-rng-obj-y) init.o
 
 stub-obj-y += pbkdf-stub.o
+
+# Override the previous crypto-obj-y value to avoid building most crypto
+crypto-obj-y = hash.o
+crypto-obj-$(if $(CONFIG_NETTLE),n,$(if $(CONFIG_GCRYPT),n,y)) += hash-glib.o
diff --git a/default-configs/i386-softmmu.mak b/default-configs/i386-softmmu.mak
index 4cc64dafa2..098f64b681 100644
--- a/default-configs/i386-softmmu.mak
+++ b/default-configs/i386-softmmu.mak
@@ -25,7 +25,32 @@
 
 # Boards:
 #
-CONFIG_ISAPC=y
+CONFIG_ISAPC=n
 CONFIG_I440FX=y
-CONFIG_Q35=y
-CONFIG_MICROVM=y
+CONFIG_Q35=n
+CONFIG_MICROVM=n
+
+# Wanted devices:
+CONFIG_AHCI=y
+CONFIG_AHCI_ICH9=y
+CONFIG_BOCHS_DISPLAY=y
+CONFIG_E1000_PCI=y
+CONFIG_EDID=y
+CONFIG_FDC=y
+CONFIG_GENERIC_LOADER=y
+CONFIG_ISA_DEBUG=y
+CONFIG_NVDIMM=y
+CONFIG_NVME_PCI=y
+CONFIG_PARALLEL=y
+CONFIG_RTL8139_PCI=y
+CONFIG_TPM_EMULATOR=y
+CONFIG_TPM_CRB=y
+CONFIG_USB=y
+CONFIG_USB_EHCI=y
+CONFIG_USB_EHCI_PCI=y
+CONFIG_USB_OHCI=y
+CONFIG_USB_OHCI_PCI=y
+CONFIG_USB_TABLET_WACOM=y
+CONFIG_USB_UHCI=y
+CONFIG_VGA_CIRRUS=y
+CONFIG_VGA_PCI=y
diff --git a/hw/Makefile.objs b/hw/Makefile.objs
index 66eef20561..efc8663d75 100644
--- a/hw/Makefile.objs
+++ b/hw/Makefile.objs
@@ -33,7 +33,7 @@ devices-dirs-y += ssi/
 devices-dirs-y += timer/
 devices-dirs-$(CONFIG_TPM) += tpm/
 devices-dirs-y += usb/
-devices-dirs-$(CONFIG_VFIO) += vfio/
+devices-dirs-$(call land,$(CONFIG_VFIO),$(call lnot,$(CONFIG_XEN))) += vfio/
 devices-dirs-y += virtio/
 devices-dirs-y += watchdog/
 devices-dirs-y += xen/
diff --git a/hw/i386/Kconfig b/hw/i386/Kconfig
index 5a494342ea..9a107153af 100644
--- a/hw/i386/Kconfig
+++ b/hw/i386/Kconfig
@@ -27,7 +27,7 @@ config PC
     select I8259
     select I8254
     select PCKBD
-    select PCSPK
+    # select PCSPK
     select I8257
     select MC146818RTC
     # For ACPI builder:
diff --git a/stubs/Makefile.objs b/stubs/Makefile.objs
index 4a50e95ec3..335c06cb05 100644
--- a/stubs/Makefile.objs
+++ b/stubs/Makefile.objs
@@ -4,6 +4,7 @@ stub-obj-y += blockdev-close-all-bdrv-states.o
 stub-obj-y += clock-warp.o
 stub-obj-y += cpu-get-clock.o
 stub-obj-y += cpu-get-icount.o
+stub-obj-y += crypto.o
 stub-obj-y += dump.o
 stub-obj-y += error-printf.o
 stub-obj-y += fdset.o
diff --git a/stubs/crypto.c b/stubs/crypto.c
new file mode 100644
index 0000000000..7ad970aa85
--- /dev/null
+++ b/stubs/crypto.c
@@ -0,0 +1,202 @@
+#include "qemu/osdep.h"
+#include "qapi/error.h"
+#include "crypto/block.h"
+#include "crypto/cipher.h"
+#include "crypto/init.h"
+#include "crypto/random.h"
+#include "crypto/secret.h"
+#include "crypto/tlssession.h"
+
+QCryptoBlock *qcrypto_block_open(QCryptoBlockOpenOptions *options,
+                                 const char *optprefix,
+                                 QCryptoBlockReadFunc readfunc,
+                                 void *opaque,
+                                 unsigned int flags,
+                                 size_t n_threads,
+                                 Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+QCryptoBlock *qcrypto_block_create(QCryptoBlockCreateOptions *options,
+                                   const char *optprefix,
+                                   QCryptoBlockInitFunc initfunc,
+                                   QCryptoBlockWriteFunc writefunc,
+                                   void *opaque,
+                                   Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+int qcrypto_block_decrypt(QCryptoBlock *block,
+                          uint64_t startsector,
+                          uint8_t *buf,
+                          size_t len,
+                          Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+int qcrypto_block_encrypt(QCryptoBlock *block,
+                          uint64_t startsector,
+                          uint8_t *buf,
+                          size_t len,
+                          Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+void qcrypto_block_free(QCryptoBlock *block)
+{
+}
+
+uint64_t qcrypto_block_get_payload_offset(QCryptoBlock *block)
+{
+    return 0;
+}
+
+bool qcrypto_block_has_format(QCryptoBlockFormat format,
+                              const uint8_t *buf,
+                              size_t buflen)
+{
+    return false;
+}
+
+QCryptoBlockInfo *qcrypto_block_get_info(QCryptoBlock *block,
+                                         Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+uint64_t qcrypto_block_get_sector_size(QCryptoBlock *block)
+{
+    return 0;
+}
+
+QCryptoTLSSession *qcrypto_tls_session_new(QCryptoTLSCreds *creds,
+                                           const char *hostname,
+                                           const char *aclname,
+                                           QCryptoTLSCredsEndpoint endpoint,
+                                           Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+int qcrypto_tls_session_handshake(QCryptoTLSSession *sess,
+                                  Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+ssize_t qcrypto_tls_session_read(QCryptoTLSSession *sess,
+                                 char *buf,
+                                 size_t len)
+{
+    return -1;
+}
+
+ssize_t qcrypto_tls_session_write(QCryptoTLSSession *sess,
+                                  const char *buf,
+                                  size_t len)
+{
+    return -1;
+}
+
+QCryptoTLSSessionHandshakeStatus
+qcrypto_tls_session_get_handshake_status(QCryptoTLSSession *sess)
+{
+    return 0;
+}
+
+void qcrypto_tls_session_set_callbacks(QCryptoTLSSession *sess,
+                                       QCryptoTLSSessionWriteFunc writeFunc,
+                                       QCryptoTLSSessionReadFunc readFunc,
+                                       void *opaque)
+{
+}
+
+int qcrypto_tls_session_get_key_size(QCryptoTLSSession *session,
+                                     Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+char *qcrypto_tls_session_get_peer_name(QCryptoTLSSession *sess)
+{
+    return NULL;
+}
+
+void qcrypto_tls_session_free(QCryptoTLSSession *sess)
+{
+}
+
+int qcrypto_tls_session_check_credentials(QCryptoTLSSession *sess,
+                                          Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+QCryptoCipher *qcrypto_cipher_new(QCryptoCipherAlgorithm alg,
+                                  QCryptoCipherMode mode,
+                                  const uint8_t *key, size_t nkey,
+                                  Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+void qcrypto_cipher_free(QCryptoCipher *cipher)
+{
+}
+
+int qcrypto_cipher_encrypt(QCryptoCipher *cipher,
+                           const void *in,
+                           void *out,
+                           size_t len,
+                           Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+bool qcrypto_cipher_supports(QCryptoCipherAlgorithm alg,
+                             QCryptoCipherMode mode)
+{
+    return false;
+}
+
+int qcrypto_init(Error **errp)
+{
+    return 0;
+}
+
+int qcrypto_random_bytes(void *buf,
+                         size_t buflen,
+                         Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+char *qcrypto_secret_lookup_as_utf8(const char *secretid,
+                                    Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+char *qcrypto_secret_lookup_as_base64(const char *secretid,
+                                      Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
